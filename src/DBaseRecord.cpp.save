#include "DBaseRecord.h"
#include <iostream>
#include <string>

DBaseRecord::DBaseRecord()
{
    //ctor
}

DBaseRecord::DBaseRecord(std::string& recordStr, std::vector<DBaseColDef>& colDef)
{
    //Record has space (0x20) if not deleted
    if(recordStr.at(0) == '\x2A'){
        m_recordDeleted = true;
    }else{
        //in one record
        unsigned int curPos = 1;
        for(DBaseColDef column : colDef){
            std::string* fieldStr = new std::string;
            fieldStr = recordStr.substr(curPos, column.m_fieldLength);
            m_recordData.push_back(fieldStr);
            curPos += column.m_fieldLength;
        }
    }
}

DBaseRecord::~DBaseRecord()
{
    for(std::string* s : m_recordData){
        delete s;
    }
}

void DBaseRecord::stat()
{
    for
    if(!m_recordDeleted){
        std::cout << m_recordData << std::endl;
    }
}

